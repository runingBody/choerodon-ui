// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Range should show tooltip when hovering range handler 1`] = `
<Range
  clearButton={false}
  dataSet={
    DataSet {
      "cachedSelected": Array [],
      "children": Object {},
      "currentPage": 1,
      "dataToJSON": "dirty",
      "el": undefined,
      "events": Object {
        "indexchange": Array [
          Array [
            [Function],
            false,
          ],
        ],
        "update": Array [
          Array [
            [MockFunction],
            false,
          ],
        ],
      },
      "fields": Object {
        "range": Field {
          "dataSet": [Circular],
          "isDynamicPropsComputing": false,
          "lastDynamicProps": Object {},
          "pending": PromiseQueue {
            "queue": Array [],
            "queueing": false,
          },
          "pristineProps": Object {
            "defaultValue": 50,
            "max": 100,
            "min": 0,
            "name": "range",
            "step": 1,
          },
          "props": Object {
            "defaultValue": 50,
            "max": 100,
            "min": 0,
            "name": "range",
            "step": 1,
          },
          "record": undefined,
          "validator": Validator {
            "control": undefined,
            "field": [Circular],
            "innerValidationResults": Array [],
          },
        },
      },
      "inBatchSelection": false,
      "name": undefined,
      "originalData": Array [],
      "pageSize": 10,
      "parent": undefined,
      "parentName": undefined,
      "pending": PromiseQueue {
        "queue": Array [],
        "queueing": false,
      },
      "props": Object {
        "autoCreate": true,
        "autoLocateAfterCreate": true,
        "autoLocateAfterRemove": true,
        "autoLocateFirst": true,
        "autoQuery": false,
        "autoQueryAfterSubmit": true,
        "cascadeParams": [Function],
        "dataToJSON": "dirty",
        "events": Object {
          "update": [MockFunction],
        },
        "fields": Array [
          Object {
            "defaultValue": 50,
            "max": 100,
            "min": 0,
            "name": "range",
            "step": 1,
          },
        ],
        "modifiedCheck": true,
        "pageSize": 10,
        "paging": true,
        "selection": "multiple",
      },
      "queryParameter": Object {},
      "records": Array [
        Record {
          "cascadeRecordsMap": Object {},
          "data": Object {
            "range": 50,
          },
          "dataSet": [Circular],
          "dataSetSnapshot": Object {},
          "editing": undefined,
          "fields": Object {
            "range": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "range",
              },
              "props": Object {
                "name": "range",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
          },
          "id": 1001,
          "isCached": false,
          "isCurrent": true,
          "isSelected": false,
          "pristineData": Object {
            "range": 50,
          },
          "selectable": true,
          "state": Object {},
          "status": "add",
        },
      ],
      "resetInBatch": false,
      "selection": "multiple",
      "status": "ready",
      "syncChildrenRemote": [Function],
      "totalCount": 0,
    }
  }
  disabled={false}
  max={100}
  min={0}
  multiple={false}
  noValidate={false}
  readOnly={false}
  showHelp="newLine"
  step={1}
  suffixCls="range"
  trim="both"
  vertical={false}
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    defaultHidden={true}
    mouseEnterDelay={100}
    mouseLeaveDelay={100}
    placement="bottomLeft"
    suffixCls="form-tooltip c7n-pro-tooltip"
    theme="light"
    title={null}
    transitionName="zoom-big-fast"
    trigger={
      Array [
        "hover",
      ]
    }
  >
    <Trigger
      action={
        Array [
          "hover",
        ]
      }
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      blurDelay={0}
      builtinPlacements={
        Object {
          "bottom": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      defaultPopupHidden={true}
      focusDelay={150}
      mouseEnterDelay={100}
      mouseLeaveDelay={100}
      popupContent={null}
      popupPlacement="bottomLeft"
      prefixCls="c7n-pro-form-tooltip c7n-pro-tooltip"
      suffixCls="form-tooltip c7n-pro-tooltip"
      theme="light"
      title={null}
      transitionName="zoom-big-fast"
    >
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$.$wrapper"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <label
          className="c7n-pro-range-wrapper"
          key=".$wrapper"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        >
          <input
            autoComplete="off"
            className="c7n-pro-range"
            disabled={false}
            max={100}
            min={0}
            multiple={false}
            noValidate={false}
            onBlur={[Function]}
            onChange={[Function]}
            onCompositionEnd={[Function]}
            onCompositionStart={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            step={1}
            type="range"
            value={0}
          />
          <div
            className="c7n-pro-range-track"
            onMouseDown={[Function]}
          >
            <div
              className="c7n-pro-range-draghandle"
              style={
                Object {
                  "left": 0,
                }
              }
            />
            <div
              className="c7n-pro-range-selection"
              style={
                Object {
                  "width": 0,
                }
              }
            />
          </div>
        </label>
      </TriggerChild>
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$text-null/.1"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          key="text-null/.1"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        />
      </TriggerChild>
      <Popup
        align={
          Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          }
        }
        className="c7n-pro-form-tooltip c7n-pro-tooltip-popup"
        getClassNameFromAlign={[Function]}
        getRootDomNode={[Function]}
        hidden={true}
        key="popup"
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        suffixCls="popup"
        transitionName="zoom-big-fast"
      />
    </Trigger>
  </Tooltip>
</Range>
`;

exports[`Range should show tooltip when hovering range handler 2`] = `
<Range
  clearButton={false}
  dataSet={
    DataSet {
      "cachedSelected": Array [],
      "children": Object {},
      "currentPage": 1,
      "dataToJSON": "dirty",
      "el": undefined,
      "events": Object {
        "indexchange": Array [
          Array [
            [Function],
            false,
          ],
        ],
        "update": Array [
          Array [
            [MockFunction],
            false,
          ],
        ],
      },
      "fields": Object {
        "range": Field {
          "dataSet": [Circular],
          "isDynamicPropsComputing": false,
          "lastDynamicProps": Object {},
          "pending": PromiseQueue {
            "queue": Array [],
            "queueing": false,
          },
          "pristineProps": Object {
            "defaultValue": 50,
            "max": 100,
            "min": 0,
            "name": "range",
            "step": 1,
          },
          "props": Object {
            "defaultValue": 50,
            "max": 100,
            "min": 0,
            "name": "range",
            "step": 1,
          },
          "record": undefined,
          "validator": Validator {
            "control": undefined,
            "field": [Circular],
            "innerValidationResults": Array [],
          },
        },
      },
      "inBatchSelection": false,
      "name": undefined,
      "originalData": Array [],
      "pageSize": 10,
      "parent": undefined,
      "parentName": undefined,
      "pending": PromiseQueue {
        "queue": Array [],
        "queueing": false,
      },
      "props": Object {
        "autoCreate": true,
        "autoLocateAfterCreate": true,
        "autoLocateAfterRemove": true,
        "autoLocateFirst": true,
        "autoQuery": false,
        "autoQueryAfterSubmit": true,
        "cascadeParams": [Function],
        "dataToJSON": "dirty",
        "events": Object {
          "update": [MockFunction],
        },
        "fields": Array [
          Object {
            "defaultValue": 50,
            "max": 100,
            "min": 0,
            "name": "range",
            "step": 1,
          },
        ],
        "modifiedCheck": true,
        "pageSize": 10,
        "paging": true,
        "selection": "multiple",
      },
      "queryParameter": Object {},
      "records": Array [
        Record {
          "cascadeRecordsMap": Object {},
          "data": Object {
            "range": 50,
          },
          "dataSet": [Circular],
          "dataSetSnapshot": Object {},
          "editing": undefined,
          "fields": Object {
            "range": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "range",
              },
              "props": Object {
                "name": "range",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
          },
          "id": 1001,
          "isCached": false,
          "isCurrent": true,
          "isSelected": false,
          "pristineData": Object {
            "range": 50,
          },
          "selectable": true,
          "state": Object {},
          "status": "add",
        },
      ],
      "resetInBatch": false,
      "selection": "multiple",
      "status": "ready",
      "syncChildrenRemote": [Function],
      "totalCount": 0,
    }
  }
  disabled={false}
  max={100}
  min={0}
  multiple={false}
  noValidate={false}
  readOnly={false}
  showHelp="newLine"
  step={1}
  suffixCls="range"
  trim="both"
  vertical={false}
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    defaultHidden={true}
    mouseEnterDelay={100}
    mouseLeaveDelay={100}
    placement="bottomLeft"
    suffixCls="form-tooltip c7n-pro-tooltip"
    theme="light"
    title={null}
    transitionName="zoom-big-fast"
    trigger={
      Array [
        "hover",
      ]
    }
  >
    <Trigger
      action={
        Array [
          "hover",
        ]
      }
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      blurDelay={0}
      builtinPlacements={
        Object {
          "bottom": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      defaultPopupHidden={true}
      focusDelay={150}
      mouseEnterDelay={100}
      mouseLeaveDelay={100}
      popupContent={null}
      popupPlacement="bottomLeft"
      prefixCls="c7n-pro-form-tooltip c7n-pro-tooltip"
      suffixCls="form-tooltip c7n-pro-tooltip"
      theme="light"
      title={null}
      transitionName="zoom-big-fast"
    >
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$.$wrapper"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <label
          className="c7n-pro-range-wrapper"
          key=".$wrapper"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        >
          <input
            autoComplete="off"
            className="c7n-pro-range"
            disabled={false}
            max={100}
            min={0}
            multiple={false}
            noValidate={false}
            onBlur={[Function]}
            onChange={[Function]}
            onCompositionEnd={[Function]}
            onCompositionStart={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            step={1}
            type="range"
            value={0}
          />
          <div
            className="c7n-pro-range-track"
            onMouseDown={[Function]}
          >
            <div
              className="c7n-pro-range-draghandle"
              style={
                Object {
                  "left": 0,
                }
              }
            />
            <div
              className="c7n-pro-range-selection"
              style={
                Object {
                  "width": 0,
                }
              }
            />
          </div>
        </label>
      </TriggerChild>
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$text-null/.1"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          key="text-null/.1"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        />
      </TriggerChild>
      <Popup
        align={
          Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          }
        }
        className="c7n-pro-form-tooltip c7n-pro-tooltip-popup"
        getClassNameFromAlign={[Function]}
        getRootDomNode={[Function]}
        hidden={true}
        key="popup"
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        suffixCls="popup"
        transitionName="zoom-big-fast"
      />
    </Trigger>
  </Tooltip>
</Range>
`;

exports[`Range the range drag test  1`] = `
<Range
  clearButton={false}
  dataSet={
    DataSet {
      "cachedSelected": Array [],
      "children": Object {},
      "currentPage": 1,
      "dataToJSON": "dirty",
      "el": undefined,
      "events": Object {
        "indexchange": Array [
          Array [
            [Function],
            false,
          ],
        ],
        "update": Array [
          Array [
            [MockFunction],
            false,
          ],
        ],
      },
      "fields": Object {
        "range": Field {
          "dataSet": [Circular],
          "isDynamicPropsComputing": false,
          "lastDynamicProps": Object {},
          "pending": PromiseQueue {
            "queue": Array [],
            "queueing": false,
          },
          "pristineProps": Object {
            "defaultValue": 0,
            "max": 100,
            "min": 0,
            "name": "range",
            "step": 1,
          },
          "props": Object {
            "defaultValue": 0,
            "max": 100,
            "min": 0,
            "name": "range",
            "step": 1,
          },
          "record": undefined,
          "validator": Validator {
            "control": undefined,
            "field": [Circular],
            "innerValidationResults": Array [],
          },
        },
      },
      "inBatchSelection": false,
      "name": undefined,
      "originalData": Array [],
      "pageSize": 10,
      "parent": undefined,
      "parentName": undefined,
      "pending": PromiseQueue {
        "queue": Array [],
        "queueing": false,
      },
      "props": Object {
        "autoCreate": true,
        "autoLocateAfterCreate": true,
        "autoLocateAfterRemove": true,
        "autoLocateFirst": true,
        "autoQuery": false,
        "autoQueryAfterSubmit": true,
        "cascadeParams": [Function],
        "dataToJSON": "dirty",
        "events": Object {
          "update": [MockFunction],
        },
        "fields": Array [
          Object {
            "defaultValue": 0,
            "max": 100,
            "min": 0,
            "name": "range",
            "step": 1,
          },
        ],
        "modifiedCheck": true,
        "pageSize": 10,
        "paging": true,
        "selection": "multiple",
      },
      "queryParameter": Object {},
      "records": Array [
        Record {
          "cascadeRecordsMap": Object {},
          "data": Object {
            "range": 0,
          },
          "dataSet": [Circular],
          "dataSetSnapshot": Object {},
          "editing": undefined,
          "fields": Object {
            "range": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "range",
              },
              "props": Object {
                "name": "range",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
          },
          "id": 1002,
          "isCached": false,
          "isCurrent": true,
          "isSelected": false,
          "pristineData": Object {
            "range": 0,
          },
          "selectable": true,
          "state": Object {},
          "status": "add",
        },
      ],
      "resetInBatch": false,
      "selection": "multiple",
      "status": "ready",
      "syncChildrenRemote": [Function],
      "totalCount": 0,
    }
  }
  disabled={false}
  max={100}
  min={0}
  multiple={false}
  noValidate={false}
  readOnly={false}
  showHelp="newLine"
  step={1}
  suffixCls="range"
  trim="both"
  vertical={false}
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    defaultHidden={true}
    mouseEnterDelay={100}
    mouseLeaveDelay={100}
    placement="bottomLeft"
    suffixCls="form-tooltip c7n-pro-tooltip"
    theme="light"
    title={null}
    transitionName="zoom-big-fast"
    trigger={
      Array [
        "hover",
      ]
    }
  >
    <Trigger
      action={
        Array [
          "hover",
        ]
      }
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      blurDelay={0}
      builtinPlacements={
        Object {
          "bottom": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      defaultPopupHidden={true}
      focusDelay={150}
      mouseEnterDelay={100}
      mouseLeaveDelay={100}
      popupContent={null}
      popupPlacement="bottomLeft"
      prefixCls="c7n-pro-form-tooltip c7n-pro-tooltip"
      suffixCls="form-tooltip c7n-pro-tooltip"
      theme="light"
      title={null}
      transitionName="zoom-big-fast"
    >
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$.$wrapper"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <label
          className="c7n-pro-range-wrapper"
          key=".$wrapper"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        >
          <input
            autoComplete="off"
            className="c7n-pro-range"
            disabled={false}
            max={100}
            min={0}
            multiple={false}
            noValidate={false}
            onBlur={[Function]}
            onChange={[Function]}
            onCompositionEnd={[Function]}
            onCompositionStart={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            step={1}
            type="range"
            value={0}
          />
          <div
            className="c7n-pro-range-track"
            onMouseDown={[Function]}
          >
            <div
              className="c7n-pro-range-draghandle"
              style={
                Object {
                  "left": 0,
                }
              }
            />
            <div
              className="c7n-pro-range-selection"
              style={
                Object {
                  "width": 0,
                }
              }
            />
          </div>
        </label>
      </TriggerChild>
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$text-null/.1"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          key="text-null/.1"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        />
      </TriggerChild>
      <Popup
        align={
          Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          }
        }
        className="c7n-pro-form-tooltip c7n-pro-tooltip-popup"
        getClassNameFromAlign={[Function]}
        getRootDomNode={[Function]}
        hidden={true}
        key="popup"
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        suffixCls="popup"
        transitionName="zoom-big-fast"
      />
    </Trigger>
  </Tooltip>
</Range>
`;
