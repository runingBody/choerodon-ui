// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`IntlField-pro { ok, cancel } button click render correctly 1`] = `
<IntlField
  clearButton={false}
  disabled={false}
  multiple={false}
  noValidate={false}
  readOnly={false}
  showHelp="newLine"
  suffixCls="input"
  trim="both"
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    defaultHidden={true}
    mouseEnterDelay={100}
    mouseLeaveDelay={100}
    placement="bottomLeft"
    suffixCls="form-tooltip c7n-pro-tooltip"
    theme="light"
    title={null}
    transitionName="zoom-big-fast"
    trigger={
      Array [
        "hover",
      ]
    }
  >
    <Trigger
      action={
        Array [
          "hover",
        ]
      }
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      blurDelay={0}
      builtinPlacements={
        Object {
          "bottom": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      defaultPopupHidden={true}
      focusDelay={150}
      mouseEnterDelay={100}
      mouseLeaveDelay={100}
      popupContent={null}
      popupPlacement="bottomLeft"
      prefixCls="c7n-pro-form-tooltip c7n-pro-tooltip"
      suffixCls="form-tooltip c7n-pro-tooltip"
      theme="light"
      title={null}
      transitionName="zoom-big-fast"
    >
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$.$element"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          className="c7n-pro-input-wrapper c7n-pro-input-empty c7n-pro-input-suffix-button"
          key=".$element"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        >
          <label
            onMouseDown={[Function]}
          >
            <input
              autoComplete="off"
              className="c7n-pro-input"
              disabled={false}
              key="text"
              multiple={false}
              noValidate={false}
              onBlur={[Function]}
              onChange={[Function]}
              onCompositionEnd={[Function]}
              onCompositionStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              readOnly={false}
              type="text"
              value=""
            />
            <div
              className="c7n-pro-input-suffix"
              onClick={[Function]}
              onMouseDown={[Function]}
            >
              <Icon
                type="language"
              >
                <i
                  className="icon icon-language"
                />
              </Icon>
            </div>
          </label>
        </span>
      </TriggerChild>
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$text-null/.1"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          key="text-null/.1"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        />
      </TriggerChild>
      <Popup
        align={
          Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          }
        }
        className="c7n-pro-form-tooltip c7n-pro-tooltip-popup"
        getClassNameFromAlign={[Function]}
        getRootDomNode={[Function]}
        hidden={true}
        key="popup"
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        suffixCls="popup"
        transitionName="zoom-big-fast"
      />
    </Trigger>
  </Tooltip>
</IntlField>
`;

exports[`IntlField-pro renders IntlField correctly 1`] = `
<IntlField
  clearButton={false}
  disabled={false}
  multiple={false}
  noValidate={false}
  readOnly={false}
  showHelp="newLine"
  suffixCls="input"
  trim="both"
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    defaultHidden={true}
    mouseEnterDelay={100}
    mouseLeaveDelay={100}
    placement="bottomLeft"
    suffixCls="form-tooltip c7n-pro-tooltip"
    theme="light"
    title={null}
    transitionName="zoom-big-fast"
    trigger={
      Array [
        "hover",
      ]
    }
  >
    <Trigger
      action={
        Array [
          "hover",
        ]
      }
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      blurDelay={0}
      builtinPlacements={
        Object {
          "bottom": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      defaultPopupHidden={true}
      focusDelay={150}
      mouseEnterDelay={100}
      mouseLeaveDelay={100}
      popupContent={null}
      popupPlacement="bottomLeft"
      prefixCls="c7n-pro-form-tooltip c7n-pro-tooltip"
      suffixCls="form-tooltip c7n-pro-tooltip"
      theme="light"
      title={null}
      transitionName="zoom-big-fast"
    >
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$.$element"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          className="c7n-pro-input-wrapper c7n-pro-input-empty c7n-pro-input-suffix-button"
          key=".$element"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        >
          <label
            onMouseDown={[Function]}
          >
            <input
              autoComplete="off"
              className="c7n-pro-input"
              disabled={false}
              key="text"
              multiple={false}
              noValidate={false}
              onBlur={[Function]}
              onChange={[Function]}
              onCompositionEnd={[Function]}
              onCompositionStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              readOnly={false}
              type="text"
              value=""
            />
            <div
              className="c7n-pro-input-suffix"
              onClick={[Function]}
              onMouseDown={[Function]}
            >
              <Icon
                type="language"
              >
                <i
                  className="icon icon-language"
                />
              </Icon>
            </div>
          </label>
        </span>
      </TriggerChild>
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$text-null/.1"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          key="text-null/.1"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        />
      </TriggerChild>
      <Popup
        align={
          Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          }
        }
        className="c7n-pro-form-tooltip c7n-pro-tooltip-popup"
        getClassNameFromAlign={[Function]}
        getRootDomNode={[Function]}
        hidden={true}
        key="popup"
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        suffixCls="popup"
        transitionName="zoom-big-fast"
      />
    </Trigger>
  </Tooltip>
</IntlField>
`;

exports[`IntlField-pro renders dataset correctly 1`] = `
<IntlFieldTest>
  <IntlField
    clearButton={false}
    dataSet={
      DataSet {
        "cachedSelected": Array [],
        "children": Object {},
        "currentPage": 1,
        "dataToJSON": "dirty",
        "el": undefined,
        "events": Object {
          "indexchange": Array [
            Array [
              [Function],
              false,
            ],
          ],
          "update": Array [
            Array [
              [Function],
              false,
            ],
          ],
        },
        "fields": Object {
          "__tls.first-name.en_GB": Field {
            "dataSet": [Circular],
            "isDynamicPropsComputing": false,
            "lastDynamicProps": Object {},
            "pending": PromiseQueue {
              "queue": Array [],
              "queueing": false,
            },
            "pristineProps": Object {
              "label": "English",
              "type": "string",
            },
            "props": Object {
              "label": "English",
              "type": "string",
            },
            "record": undefined,
            "validator": Validator {
              "control": undefined,
              "field": [Circular],
              "innerValidationResults": Array [],
            },
          },
          "__tls.first-name.en_US": Field {
            "dataSet": [Circular],
            "isDynamicPropsComputing": false,
            "lastDynamicProps": Object {},
            "pending": PromiseQueue {
              "queue": Array [],
              "queueing": false,
            },
            "pristineProps": Object {
              "label": "English(US)",
              "type": "string",
            },
            "props": Object {
              "label": "English(US)",
              "type": "string",
            },
            "record": undefined,
            "validator": Validator {
              "control": undefined,
              "field": [Circular],
              "innerValidationResults": Array [],
            },
          },
          "__tls.first-name.zh_CN": Field {
            "dataSet": [Circular],
            "isDynamicPropsComputing": false,
            "lastDynamicProps": Object {},
            "pending": PromiseQueue {
              "queue": Array [],
              "queueing": false,
            },
            "pristineProps": Object {
              "label": "简体中文",
              "type": "string",
            },
            "props": Object {
              "label": "简体中文",
              "type": "string",
            },
            "record": undefined,
            "validator": Validator {
              "control": undefined,
              "field": [Circular],
              "innerValidationResults": Array [],
            },
          },
          "first-name": Field {
            "dataSet": [Circular],
            "isDynamicPropsComputing": false,
            "lastDynamicProps": Object {
              "bind": undefined,
              "cascadeMap": undefined,
              "defaultValidationMessages": undefined,
              "disabled": undefined,
              "format": undefined,
              "help": undefined,
              "label": undefined,
              "lookupAxiosConfig": undefined,
              "lookupCode": undefined,
              "lookupUrl": undefined,
              "lovCode": undefined,
              "lovPara": undefined,
              "max": undefined,
              "maxLength": undefined,
              "min": undefined,
              "minLength": undefined,
              "multiple": undefined,
              "nonStrictStep": undefined,
              "pattern": undefined,
              "range": undefined,
              "readOnly": undefined,
              "required": undefined,
              "step": undefined,
              "transformResponse": undefined,
              "trim": undefined,
              "type": undefined,
              "unique": undefined,
              "validator": undefined,
            },
            "pending": PromiseQueue {
              "queue": Array [],
              "queueing": false,
            },
            "pristineProps": Object {
              "defaultValue": "Huazhen",
              "dynamicProps": Object {
                "bind": [Function],
              },
              "name": "first-name",
              "required": true,
              "type": "intl",
            },
            "props": Object {
              "defaultValue": "Huazhen",
              "dynamicProps": Object {
                "bind": [Function],
              },
              "name": "first-name",
              "required": true,
              "type": "intl",
            },
            "record": undefined,
            "validator": Validator {
              "control": undefined,
              "field": [Circular],
              "innerValidationResults": Array [],
            },
          },
        },
        "inBatchSelection": false,
        "name": undefined,
        "originalData": Array [
          Record {
            "cascadeRecordsMap": Object {},
            "data": Object {
              "first-name": "吴",
            },
            "dataSet": [Circular],
            "dataSetSnapshot": Object {},
            "editing": undefined,
            "fields": Object {
              "__tls.first-name.en_GB": Field {
                "dataSet": [Circular],
                "isDynamicPropsComputing": false,
                "lastDynamicProps": Object {},
                "pending": PromiseQueue {
                  "queue": Array [],
                  "queueing": false,
                },
                "pristineProps": Object {
                  "name": "__tls.first-name.en_GB",
                },
                "props": Object {
                  "name": "__tls.first-name.en_GB",
                },
                "record": [Circular],
                "validator": Validator {
                  "control": undefined,
                  "field": [Circular],
                  "innerValidationResults": Array [],
                },
              },
              "__tls.first-name.en_US": Field {
                "dataSet": [Circular],
                "isDynamicPropsComputing": false,
                "lastDynamicProps": Object {},
                "pending": PromiseQueue {
                  "queue": Array [],
                  "queueing": false,
                },
                "pristineProps": Object {
                  "name": "__tls.first-name.en_US",
                },
                "props": Object {
                  "name": "__tls.first-name.en_US",
                },
                "record": [Circular],
                "validator": Validator {
                  "control": undefined,
                  "field": [Circular],
                  "innerValidationResults": Array [],
                },
              },
              "__tls.first-name.zh_CN": Field {
                "dataSet": [Circular],
                "isDynamicPropsComputing": false,
                "lastDynamicProps": Object {},
                "pending": PromiseQueue {
                  "queue": Array [],
                  "queueing": false,
                },
                "pristineProps": Object {
                  "name": "__tls.first-name.zh_CN",
                },
                "props": Object {
                  "name": "__tls.first-name.zh_CN",
                },
                "record": [Circular],
                "validator": Validator {
                  "control": undefined,
                  "field": [Circular],
                  "innerValidationResults": Array [],
                },
              },
              "first-name": Field {
                "dataSet": [Circular],
                "isDynamicPropsComputing": false,
                "lastDynamicProps": Object {
                  "bind": undefined,
                  "cascadeMap": undefined,
                  "defaultValidationMessages": undefined,
                  "disabled": undefined,
                  "format": undefined,
                  "help": undefined,
                  "label": undefined,
                  "lookupAxiosConfig": undefined,
                  "lookupCode": undefined,
                  "lookupUrl": undefined,
                  "lovCode": undefined,
                  "lovPara": undefined,
                  "max": undefined,
                  "maxLength": undefined,
                  "min": undefined,
                  "minLength": undefined,
                  "multiple": undefined,
                  "nonStrictStep": undefined,
                  "pattern": undefined,
                  "range": undefined,
                  "readOnly": undefined,
                  "required": undefined,
                  "step": undefined,
                  "transformResponse": undefined,
                  "trim": undefined,
                  "type": undefined,
                  "unique": undefined,
                  "validator": undefined,
                },
                "pending": PromiseQueue {
                  "queue": Array [],
                  "queueing": false,
                },
                "pristineProps": Object {
                  "name": "first-name",
                },
                "props": Object {
                  "name": "first-name",
                },
                "record": [Circular],
                "validator": Validator {
                  "control": undefined,
                  "field": [Circular],
                  "innerValidationResults": Array [],
                },
              },
            },
            "id": 1001,
            "isCached": false,
            "isCurrent": true,
            "isSelected": false,
            "pristineData": Object {
              "first-name": "吴",
            },
            "selectable": true,
            "state": Object {},
            "status": "sync",
          },
        ],
        "pageSize": 10,
        "parent": undefined,
        "parentName": undefined,
        "pending": PromiseQueue {
          "queue": Array [],
          "queueing": false,
        },
        "props": Object {
          "autoCreate": false,
          "autoLocateAfterCreate": true,
          "autoLocateAfterRemove": true,
          "autoLocateFirst": true,
          "autoQuery": false,
          "autoQueryAfterSubmit": true,
          "cascadeParams": [Function],
          "data": Array [
            Object {
              "first-name": "吴",
            },
          ],
          "dataToJSON": "dirty",
          "events": Object {
            "update": [Function],
          },
          "fields": Array [
            Object {
              "defaultValue": "Huazhen",
              "name": "first-name",
              "required": true,
              "type": "intl",
            },
          ],
          "modifiedCheck": true,
          "pageSize": 10,
          "paging": true,
          "primaryKey": "pk",
          "selection": "multiple",
          "tlsUrl": "/dataset/user/languages",
        },
        "queryParameter": Object {},
        "records": Array [
          Record {
            "cascadeRecordsMap": Object {},
            "data": Object {
              "first-name": "吴",
            },
            "dataSet": [Circular],
            "dataSetSnapshot": Object {},
            "editing": undefined,
            "fields": Object {
              "__tls.first-name.en_GB": Field {
                "dataSet": [Circular],
                "isDynamicPropsComputing": false,
                "lastDynamicProps": Object {},
                "pending": PromiseQueue {
                  "queue": Array [],
                  "queueing": false,
                },
                "pristineProps": Object {
                  "name": "__tls.first-name.en_GB",
                },
                "props": Object {
                  "name": "__tls.first-name.en_GB",
                },
                "record": [Circular],
                "validator": Validator {
                  "control": undefined,
                  "field": [Circular],
                  "innerValidationResults": Array [],
                },
              },
              "__tls.first-name.en_US": Field {
                "dataSet": [Circular],
                "isDynamicPropsComputing": false,
                "lastDynamicProps": Object {},
                "pending": PromiseQueue {
                  "queue": Array [],
                  "queueing": false,
                },
                "pristineProps": Object {
                  "name": "__tls.first-name.en_US",
                },
                "props": Object {
                  "name": "__tls.first-name.en_US",
                },
                "record": [Circular],
                "validator": Validator {
                  "control": undefined,
                  "field": [Circular],
                  "innerValidationResults": Array [],
                },
              },
              "__tls.first-name.zh_CN": Field {
                "dataSet": [Circular],
                "isDynamicPropsComputing": false,
                "lastDynamicProps": Object {},
                "pending": PromiseQueue {
                  "queue": Array [],
                  "queueing": false,
                },
                "pristineProps": Object {
                  "name": "__tls.first-name.zh_CN",
                },
                "props": Object {
                  "name": "__tls.first-name.zh_CN",
                },
                "record": [Circular],
                "validator": Validator {
                  "control": undefined,
                  "field": [Circular],
                  "innerValidationResults": Array [],
                },
              },
              "first-name": Field {
                "dataSet": [Circular],
                "isDynamicPropsComputing": false,
                "lastDynamicProps": Object {
                  "bind": undefined,
                  "cascadeMap": undefined,
                  "defaultValidationMessages": undefined,
                  "disabled": undefined,
                  "format": undefined,
                  "help": undefined,
                  "label": undefined,
                  "lookupAxiosConfig": undefined,
                  "lookupCode": undefined,
                  "lookupUrl": undefined,
                  "lovCode": undefined,
                  "lovPara": undefined,
                  "max": undefined,
                  "maxLength": undefined,
                  "min": undefined,
                  "minLength": undefined,
                  "multiple": undefined,
                  "nonStrictStep": undefined,
                  "pattern": undefined,
                  "range": undefined,
                  "readOnly": undefined,
                  "required": undefined,
                  "step": undefined,
                  "transformResponse": undefined,
                  "trim": undefined,
                  "type": undefined,
                  "unique": undefined,
                  "validator": undefined,
                },
                "pending": PromiseQueue {
                  "queue": Array [],
                  "queueing": false,
                },
                "pristineProps": Object {
                  "name": "first-name",
                },
                "props": Object {
                  "name": "first-name",
                },
                "record": [Circular],
                "validator": Validator {
                  "control": undefined,
                  "field": [Circular],
                  "innerValidationResults": Array [],
                },
              },
            },
            "id": 1001,
            "isCached": false,
            "isCurrent": true,
            "isSelected": false,
            "pristineData": Object {
              "first-name": "吴",
            },
            "selectable": true,
            "state": Object {},
            "status": "sync",
          },
        ],
        "resetInBatch": false,
        "selection": "multiple",
        "status": "ready",
        "syncChildrenRemote": [Function],
        "totalCount": 1,
      }
    }
    disabled={false}
    multiple={false}
    name="first-name"
    noValidate={false}
    readOnly={false}
    showHelp="newLine"
    suffixCls="input"
    trim="both"
  >
    <Tooltip
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      defaultHidden={true}
      mouseEnterDelay={100}
      mouseLeaveDelay={100}
      placement="bottomLeft"
      suffixCls="form-tooltip c7n-pro-tooltip"
      theme="light"
      title={null}
      transitionName="zoom-big-fast"
      trigger={
        Array [
          "hover",
        ]
      }
    >
      <Trigger
        action={
          Array [
            "hover",
          ]
        }
        arrowPointAtCenter={false}
        autoAdjustOverflow={true}
        blurDelay={0}
        builtinPlacements={
          Object {
            "bottom": Object {
              "offset": Array [
                0,
                10,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tc",
                "bc",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "bottomLeft": Object {
              "offset": Array [
                0,
                10,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tl",
                "bl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "bottomRight": Object {
              "offset": Array [
                0,
                10,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tr",
                "br",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "left": Object {
              "offset": Array [
                -10,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "cr",
                "cl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "leftBottom": Object {
              "offset": Array [
                -10,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "br",
                "bl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "leftTop": Object {
              "offset": Array [
                -10,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tr",
                "tl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "right": Object {
              "offset": Array [
                10,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "cl",
                "cr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "rightBottom": Object {
              "offset": Array [
                10,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bl",
                "br",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "rightTop": Object {
              "offset": Array [
                10,
                0,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tl",
                "tr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "top": Object {
              "offset": Array [
                0,
                -10,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bc",
                "tc",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "topLeft": Object {
              "offset": Array [
                0,
                -10,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "bl",
                "tl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
            "topRight": Object {
              "offset": Array [
                0,
                -10,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "br",
                "tr",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            },
          }
        }
        defaultPopupHidden={true}
        focusDelay={150}
        mouseEnterDelay={100}
        mouseLeaveDelay={100}
        popupContent={null}
        popupPlacement="bottomLeft"
        prefixCls="c7n-pro-form-tooltip c7n-pro-tooltip"
        suffixCls="form-tooltip c7n-pro-tooltip"
        theme="light"
        title={null}
        transitionName="zoom-big-fast"
      >
        <TriggerChild
          isClickScrollbar={
            Object {
              "value": false,
            }
          }
          key=".$.$element"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          popupHidden={true}
        >
          <span
            className="c7n-pro-input-wrapper c7n-pro-input-required c7n-pro-input-suffix-button"
            key=".$element"
            onBlur={[Function]}
            onClick={[Function]}
            onContextMenu={[Function]}
            onFocus={[Function]}
            onMouseDown={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
          >
            <label
              onMouseDown={[Function]}
            >
              <input
                autoComplete="off"
                className="c7n-pro-input"
                disabled={false}
                key="text"
                multiple={false}
                name="first-name"
                noValidate={false}
                onBlur={[Function]}
                onChange={[Function]}
                onCompositionEnd={[Function]}
                onCompositionStart={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                readOnly={false}
                type="text"
                value="吴"
              />
              <div
                className="c7n-pro-input-suffix"
                onClick={[Function]}
                onMouseDown={[Function]}
              >
                <Icon
                  type="language"
                >
                  <i
                    className="icon icon-language"
                  />
                </Icon>
              </div>
            </label>
          </span>
        </TriggerChild>
        <TriggerChild
          isClickScrollbar={
            Object {
              "value": false,
            }
          }
          key=".$text-null/.1"
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          popupHidden={true}
        >
          <span
            key="text-null/.1"
            onBlur={[Function]}
            onClick={[Function]}
            onContextMenu={[Function]}
            onFocus={[Function]}
            onMouseDown={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
          />
        </TriggerChild>
        <Popup
          align={
            Object {
              "offset": Array [
                0,
                10,
              ],
              "overflow": Object {
                "adjustX": 1,
                "adjustY": 1,
              },
              "points": Array [
                "tl",
                "bl",
              ],
              "targetOffset": Array [
                0,
                0,
              ],
            }
          }
          className="c7n-pro-form-tooltip c7n-pro-tooltip-popup"
          getClassNameFromAlign={[Function]}
          getRootDomNode={[Function]}
          hidden={true}
          key="popup"
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          onMouseUp={[Function]}
          suffixCls="popup"
          transitionName="zoom-big-fast"
        />
      </Trigger>
    </Tooltip>
  </IntlField>
</IntlFieldTest>
`;

exports[`IntlField-pro renders dataset correctly 2`] = `
<IntlField
  clearButton={false}
  dataSet={
    DataSet {
      "cachedSelected": Array [],
      "children": Object {},
      "currentPage": 1,
      "dataToJSON": "dirty",
      "el": undefined,
      "events": Object {
        "indexchange": Array [
          Array [
            [Function],
            false,
          ],
        ],
        "update": Array [
          Array [
            [MockFunction],
            false,
          ],
        ],
      },
      "fields": Object {
        "__tls.first.en_GB": Field {
          "dataSet": [Circular],
          "isDynamicPropsComputing": false,
          "lastDynamicProps": Object {},
          "pending": PromiseQueue {
            "queue": Array [],
            "queueing": false,
          },
          "pristineProps": Object {
            "label": "English",
            "type": "string",
          },
          "props": Object {
            "label": "English",
            "type": "string",
          },
          "record": undefined,
          "validator": Validator {
            "control": undefined,
            "field": [Circular],
            "innerValidationResults": Array [],
          },
        },
        "__tls.first.en_US": Field {
          "dataSet": [Circular],
          "isDynamicPropsComputing": false,
          "lastDynamicProps": Object {},
          "pending": PromiseQueue {
            "queue": Array [],
            "queueing": false,
          },
          "pristineProps": Object {
            "label": "English(US)",
            "type": "string",
          },
          "props": Object {
            "label": "English(US)",
            "type": "string",
          },
          "record": undefined,
          "validator": Validator {
            "control": undefined,
            "field": [Circular],
            "innerValidationResults": Array [],
          },
        },
        "__tls.first.zh_CN": Field {
          "dataSet": [Circular],
          "isDynamicPropsComputing": false,
          "lastDynamicProps": Object {},
          "pending": PromiseQueue {
            "queue": Array [],
            "queueing": false,
          },
          "pristineProps": Object {
            "label": "简体中文",
            "type": "string",
          },
          "props": Object {
            "label": "简体中文",
            "type": "string",
          },
          "record": undefined,
          "validator": Validator {
            "control": undefined,
            "field": [Circular],
            "innerValidationResults": Array [],
          },
        },
        "first": Field {
          "dataSet": [Circular],
          "isDynamicPropsComputing": false,
          "lastDynamicProps": Object {
            "bind": undefined,
            "cascadeMap": undefined,
            "defaultValidationMessages": undefined,
            "disabled": undefined,
            "format": undefined,
            "help": undefined,
            "label": undefined,
            "lookupAxiosConfig": undefined,
            "lookupCode": undefined,
            "lookupUrl": undefined,
            "lovCode": undefined,
            "lovPara": undefined,
            "max": undefined,
            "maxLength": undefined,
            "min": undefined,
            "minLength": undefined,
            "multiple": undefined,
            "nonStrictStep": undefined,
            "pattern": undefined,
            "range": undefined,
            "readOnly": undefined,
            "required": undefined,
            "step": undefined,
            "transformResponse": undefined,
            "type": undefined,
            "unique": undefined,
            "validator": undefined,
          },
          "pending": PromiseQueue {
            "queue": Array [],
            "queueing": false,
          },
          "pristineProps": Object {
            "dynamicProps": Object {
              "bind": [Function],
            },
            "name": "first",
            "required": true,
            "type": "intl",
          },
          "props": Object {
            "dynamicProps": Object {
              "bind": [Function],
            },
            "name": "first",
            "required": true,
            "type": "intl",
          },
          "record": undefined,
          "validator": Validator {
            "control": undefined,
            "field": [Circular],
            "innerValidationResults": Array [],
          },
        },
      },
      "inBatchSelection": false,
      "name": undefined,
      "originalData": Array [
        Record {
          "cascadeRecordsMap": Object {},
          "data": Object {
            "first": undefined,
          },
          "dataSet": [Circular],
          "dataSetSnapshot": Object {},
          "editing": undefined,
          "fields": Object {
            "__tls.first.en_GB": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "__tls.first.en_GB",
              },
              "props": Object {
                "name": "__tls.first.en_GB",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
            "__tls.first.en_US": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "__tls.first.en_US",
              },
              "props": Object {
                "name": "__tls.first.en_US",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
            "__tls.first.zh_CN": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "__tls.first.zh_CN",
              },
              "props": Object {
                "name": "__tls.first.zh_CN",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
            "first": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {
                "bind": undefined,
                "cascadeMap": undefined,
                "defaultValidationMessages": undefined,
                "disabled": undefined,
                "format": undefined,
                "help": undefined,
                "label": undefined,
                "lookupAxiosConfig": undefined,
                "lookupCode": undefined,
                "lookupUrl": undefined,
                "lovCode": undefined,
                "lovPara": undefined,
                "max": undefined,
                "maxLength": undefined,
                "min": undefined,
                "minLength": undefined,
                "multiple": undefined,
                "nonStrictStep": undefined,
                "pattern": undefined,
                "range": undefined,
                "readOnly": undefined,
                "required": undefined,
                "step": undefined,
                "transformResponse": undefined,
                "type": undefined,
                "unique": undefined,
                "validator": undefined,
              },
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "first",
              },
              "props": Object {
                "name": "first",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
          },
          "id": 1002,
          "isCached": false,
          "isCurrent": true,
          "isSelected": false,
          "pristineData": Object {
            "first": undefined,
          },
          "selectable": true,
          "state": Object {},
          "status": "sync",
        },
      ],
      "pageSize": 10,
      "parent": undefined,
      "parentName": undefined,
      "pending": PromiseQueue {
        "queue": Array [],
        "queueing": false,
      },
      "props": Object {
        "autoCreate": false,
        "autoLocateAfterCreate": true,
        "autoLocateAfterRemove": true,
        "autoLocateFirst": true,
        "autoQuery": false,
        "autoQueryAfterSubmit": true,
        "cascadeParams": [Function],
        "data": Array [
          Object {},
        ],
        "dataToJSON": "dirty",
        "events": Object {
          "update": [MockFunction],
        },
        "fields": Array [
          Object {
            "name": "first",
            "required": true,
            "type": "intl",
          },
        ],
        "lang": "en_GB",
        "modifiedCheck": true,
        "pageSize": 10,
        "paging": true,
        "primaryKey": "pk",
        "selection": "multiple",
        "tlsUrl": "/dataset/user/languages",
      },
      "queryParameter": Object {},
      "records": Array [
        Record {
          "cascadeRecordsMap": Object {},
          "data": Object {
            "first": undefined,
          },
          "dataSet": [Circular],
          "dataSetSnapshot": Object {},
          "editing": undefined,
          "fields": Object {
            "__tls.first.en_GB": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "__tls.first.en_GB",
              },
              "props": Object {
                "name": "__tls.first.en_GB",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
            "__tls.first.en_US": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "__tls.first.en_US",
              },
              "props": Object {
                "name": "__tls.first.en_US",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
            "__tls.first.zh_CN": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "__tls.first.zh_CN",
              },
              "props": Object {
                "name": "__tls.first.zh_CN",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
            "first": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {
                "bind": undefined,
                "cascadeMap": undefined,
                "defaultValidationMessages": undefined,
                "disabled": undefined,
                "format": undefined,
                "help": undefined,
                "label": undefined,
                "lookupAxiosConfig": undefined,
                "lookupCode": undefined,
                "lookupUrl": undefined,
                "lovCode": undefined,
                "lovPara": undefined,
                "max": undefined,
                "maxLength": undefined,
                "min": undefined,
                "minLength": undefined,
                "multiple": undefined,
                "nonStrictStep": undefined,
                "pattern": undefined,
                "range": undefined,
                "readOnly": undefined,
                "required": undefined,
                "step": undefined,
                "transformResponse": undefined,
                "type": undefined,
                "unique": undefined,
                "validator": undefined,
              },
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "first",
              },
              "props": Object {
                "name": "first",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
          },
          "id": 1002,
          "isCached": false,
          "isCurrent": true,
          "isSelected": false,
          "pristineData": Object {
            "first": undefined,
          },
          "selectable": true,
          "state": Object {},
          "status": "sync",
        },
      ],
      "resetInBatch": false,
      "selection": "multiple",
      "status": "ready",
      "syncChildrenRemote": [Function],
      "totalCount": 1,
    }
  }
  disabled={false}
  multiple={false}
  name="first"
  noValidate={false}
  readOnly={false}
  showHelp="newLine"
  suffixCls="input"
  trim="both"
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    defaultHidden={true}
    mouseEnterDelay={100}
    mouseLeaveDelay={100}
    placement="bottomLeft"
    suffixCls="form-tooltip c7n-pro-tooltip"
    theme="light"
    title={null}
    transitionName="zoom-big-fast"
    trigger={
      Array [
        "hover",
      ]
    }
  >
    <Trigger
      action={
        Array [
          "hover",
        ]
      }
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      blurDelay={0}
      builtinPlacements={
        Object {
          "bottom": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      defaultPopupHidden={true}
      focusDelay={150}
      mouseEnterDelay={100}
      mouseLeaveDelay={100}
      popupContent={null}
      popupPlacement="bottomLeft"
      prefixCls="c7n-pro-form-tooltip c7n-pro-tooltip"
      suffixCls="form-tooltip c7n-pro-tooltip"
      theme="light"
      title={null}
      transitionName="zoom-big-fast"
    >
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$.$element"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          className="c7n-pro-input-wrapper c7n-pro-input-required c7n-pro-input-empty c7n-pro-input-suffix-button"
          key=".$element"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        >
          <label
            onMouseDown={[Function]}
          >
            <input
              autoComplete="off"
              className="c7n-pro-input"
              disabled={false}
              key="text"
              multiple={false}
              name="first"
              noValidate={false}
              onBlur={[Function]}
              onChange={[Function]}
              onCompositionEnd={[Function]}
              onCompositionStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              readOnly={false}
              type="text"
              value=""
            />
            <div
              className="c7n-pro-input-suffix"
              onClick={[Function]}
              onMouseDown={[Function]}
            >
              <Icon
                type="language"
              >
                <i
                  className="icon icon-language"
                />
              </Icon>
            </div>
          </label>
        </span>
      </TriggerChild>
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$text-null/.1"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          key="text-null/.1"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        />
      </TriggerChild>
      <Popup
        align={
          Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          }
        }
        className="c7n-pro-form-tooltip c7n-pro-tooltip-popup"
        getClassNameFromAlign={[Function]}
        getRootDomNode={[Function]}
        hidden={true}
        key="popup"
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        suffixCls="popup"
        transitionName="zoom-big-fast"
      />
    </Trigger>
  </Tooltip>
</IntlField>
`;
