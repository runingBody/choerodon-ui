// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CodeArea-pro the codeArea javascript formatter and lint test 1`] = `
<CodeArea
  dataSet={
    DataSet {
      "cachedSelected": Array [],
      "children": Object {},
      "currentPage": 1,
      "dataToJSON": "dirty",
      "el": undefined,
      "events": Object {
        "indexchange": Array [
          Array [
            [Function],
            false,
          ],
        ],
      },
      "fields": Object {
        "content": Field {
          "dataSet": [Circular],
          "isDynamicPropsComputing": false,
          "lastDynamicProps": Object {},
          "pending": PromiseQueue {
            "queue": Array [],
            "queueing": false,
          },
          "pristineProps": Object {
            "defaultValue": "function getOptions() {
      var options = {
        \\"compilerOptions\\": {
          \\"strictNullChecks\\": true,
          \\"moduleResolution\\": \\"node\\",
          \\"allowSyntheticDefaultImports\\": true,
          \\"experimentalDecorators\\": true,
          \\"jsx\\": \\"preserve\\",
          \\"noUnusedParameters\\": true,
          \\"noUnusedLocals\\": true,
          \\"declaration\\": true,
          \\"target\\": \\"es6\\",
          \\"lib\\": [
            \\"dom\\",
            \\"dom.iterable\\",
            \\"es7\\",
            \\"es2017.object\\"
          ]
        },
        \\"exclude\\": [
          \\"node_modules\\",
          \\"lib\\",
          \\"es\\"
        ]
      };

      return options;
    }
    ",
            "name": "content",
            "required": true,
            "type": "string",
          },
          "props": Object {
            "defaultValue": "function getOptions() {
      var options = {
        \\"compilerOptions\\": {
          \\"strictNullChecks\\": true,
          \\"moduleResolution\\": \\"node\\",
          \\"allowSyntheticDefaultImports\\": true,
          \\"experimentalDecorators\\": true,
          \\"jsx\\": \\"preserve\\",
          \\"noUnusedParameters\\": true,
          \\"noUnusedLocals\\": true,
          \\"declaration\\": true,
          \\"target\\": \\"es6\\",
          \\"lib\\": [
            \\"dom\\",
            \\"dom.iterable\\",
            \\"es7\\",
            \\"es2017.object\\"
          ]
        },
        \\"exclude\\": [
          \\"node_modules\\",
          \\"lib\\",
          \\"es\\"
        ]
      };

      return options;
    }
    ",
            "name": "content",
            "required": true,
            "type": "string",
          },
          "record": undefined,
          "validator": Validator {
            "control": undefined,
            "field": [Circular],
            "innerValidationResults": Array [],
          },
        },
      },
      "inBatchSelection": false,
      "name": undefined,
      "originalData": Array [],
      "pageSize": 10,
      "parent": undefined,
      "parentName": undefined,
      "pending": PromiseQueue {
        "queue": Array [],
        "queueing": false,
      },
      "props": Object {
        "autoCreate": true,
        "autoLocateAfterCreate": true,
        "autoLocateAfterRemove": true,
        "autoLocateFirst": true,
        "autoQuery": false,
        "autoQueryAfterSubmit": true,
        "cascadeParams": [Function],
        "dataToJSON": "dirty",
        "fields": Array [
          Object {
            "defaultValue": "function getOptions() {
      var options = {
        \\"compilerOptions\\": {
          \\"strictNullChecks\\": true,
          \\"moduleResolution\\": \\"node\\",
          \\"allowSyntheticDefaultImports\\": true,
          \\"experimentalDecorators\\": true,
          \\"jsx\\": \\"preserve\\",
          \\"noUnusedParameters\\": true,
          \\"noUnusedLocals\\": true,
          \\"declaration\\": true,
          \\"target\\": \\"es6\\",
          \\"lib\\": [
            \\"dom\\",
            \\"dom.iterable\\",
            \\"es7\\",
            \\"es2017.object\\"
          ]
        },
        \\"exclude\\": [
          \\"node_modules\\",
          \\"lib\\",
          \\"es\\"
        ]
      };

      return options;
    }
    ",
            "name": "content",
            "required": true,
            "type": "string",
          },
        ],
        "modifiedCheck": true,
        "pageSize": 10,
        "paging": true,
        "selection": "multiple",
      },
      "queryParameter": Object {},
      "records": Array [
        Record {
          "cascadeRecordsMap": Object {},
          "data": Object {
            "content": "function getOptions() {
      var options = {
        \\"compilerOptions\\": {
          \\"strictNullChecks\\": true,
          \\"moduleResolution\\": \\"node\\",
          \\"allowSyntheticDefaultImports\\": true,
          \\"experimentalDecorators\\": true,
          \\"jsx\\": \\"preserve\\",
          \\"noUnusedParameters\\": true,
          \\"noUnusedLocals\\": true,
          \\"declaration\\": true,
          \\"target\\": \\"es6\\",
          \\"lib\\": [
            \\"dom\\",
            \\"dom.iterable\\",
            \\"es7\\",
            \\"es2017.object\\"
          ]
        },
        \\"exclude\\": [
          \\"node_modules\\",
          \\"lib\\",
          \\"es\\"
        ]
      };

      return options;
    }",
          },
          "dataSet": [Circular],
          "dataSetSnapshot": Object {},
          "editing": undefined,
          "fields": Object {
            "content": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "content",
              },
              "props": Object {
                "name": "content",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
          },
          "id": 1002,
          "isCached": false,
          "isCurrent": true,
          "isSelected": false,
          "pristineData": Object {
            "content": "function getOptions() {
      var options = {
        \\"compilerOptions\\": {
          \\"strictNullChecks\\": true,
          \\"moduleResolution\\": \\"node\\",
          \\"allowSyntheticDefaultImports\\": true,
          \\"experimentalDecorators\\": true,
          \\"jsx\\": \\"preserve\\",
          \\"noUnusedParameters\\": true,
          \\"noUnusedLocals\\": true,
          \\"declaration\\": true,
          \\"target\\": \\"es6\\",
          \\"lib\\": [
            \\"dom\\",
            \\"dom.iterable\\",
            \\"es7\\",
            \\"es2017.object\\"
          ]
        },
        \\"exclude\\": [
          \\"node_modules\\",
          \\"lib\\",
          \\"es\\"
        ]
      };

      return options;
    }",
          },
          "selectable": true,
          "state": Object {},
          "status": "add",
        },
      ],
      "resetInBatch": false,
      "selection": "multiple",
      "status": "ready",
      "syncChildrenRemote": [Function],
      "totalCount": 0,
    }
  }
  disabled={false}
  formatHotKey="Alt-F"
  formatter={JSFormatter {}}
  name="content"
  noValidate={false}
  options={
    Object {
      "mode": "javascript",
    }
  }
  readOnly={false}
  showHelp="newLine"
  style={
    Object {
      "height": 500,
    }
  }
  suffixCls="code-area"
  trim="both"
  unFormatHotKey="Alt-R"
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    defaultHidden={true}
    mouseEnterDelay={100}
    mouseLeaveDelay={100}
    placement="bottomLeft"
    suffixCls="form-tooltip c7n-pro-tooltip"
    theme="light"
    title={null}
    transitionName="zoom-big-fast"
    trigger={
      Array [
        "hover",
      ]
    }
  >
    <Trigger
      action={
        Array [
          "hover",
        ]
      }
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      blurDelay={0}
      builtinPlacements={
        Object {
          "bottom": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      defaultPopupHidden={true}
      focusDelay={150}
      mouseEnterDelay={100}
      mouseLeaveDelay={100}
      popupContent={null}
      popupPlacement="bottomLeft"
      prefixCls="c7n-pro-form-tooltip c7n-pro-tooltip"
      suffixCls="form-tooltip c7n-pro-tooltip"
      theme="light"
      title={null}
      transitionName="zoom-big-fast"
    >
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$.0"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <div
          className="c7n-pro-code-area-wrapper c7n-pro-code-area-required"
          key=".0"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          style={Object {}}
        >
          <label>
            <Controlled
              className="c7n-pro-code-area"
              disabled={false}
              editorDidMount={[Function]}
              formatter={JSFormatter {}}
              name="content"
              noValidate={false}
              onBeforeChange={[Function]}
              onBlur={[Function]}
              onCompositionEnd={[Function]}
              onCompositionStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              options={
                Object {
                  "gutters": Array [
                    "CodeMirror-lint-markers",
                  ],
                  "lineNumbers": true,
                  "lint": true,
                  "mode": "javascript",
                  "readOnly": false,
                  "theme": "neat",
                }
              }
              style={
                Object {
                  "height": 500,
                }
              }
              value="function getOptions() {
  var options = {
    compilerOptions: {
      strictNullChecks: true,
      moduleResolution: \\"node\\",
      allowSyntheticDefaultImports: true,
      experimentalDecorators: true,
      jsx: \\"preserve\\",
      noUnusedParameters: true,
      noUnusedLocals: true,
      declaration: true,
      target: \\"es6\\",
      lib: [\\"dom\\", \\"dom.iterable\\", \\"es7\\", \\"es2017.object\\"]
    },
    exclude: [\\"node_modules\\", \\"lib\\", \\"es\\"]
  };

  return options;
}
"
            >
              <div
                className="react-codemirror2 c7n-pro-code-area"
              />
            </Controlled>
          </label>
        </div>
      </TriggerChild>
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$text-null/.1"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          key="text-null/.1"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        />
      </TriggerChild>
      <Popup
        align={
          Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          }
        }
        className="c7n-pro-form-tooltip c7n-pro-tooltip-popup"
        getClassNameFromAlign={[Function]}
        getRootDomNode={[Function]}
        hidden={true}
        key="popup"
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        suffixCls="popup"
        transitionName="zoom-big-fast"
      />
    </Trigger>
  </Tooltip>
</CodeArea>
`;

exports[`CodeArea-pro the codeArea json formatter and lint test 1`] = `
<CodeArea
  dataSet={
    DataSet {
      "cachedSelected": Array [],
      "children": Object {},
      "currentPage": 1,
      "dataToJSON": "dirty",
      "el": undefined,
      "events": Object {
        "indexchange": Array [
          Array [
            [Function],
            false,
          ],
        ],
      },
      "fields": Object {
        "content": Field {
          "dataSet": [Circular],
          "isDynamicPropsComputing": false,
          "lastDynamicProps": Object {},
          "pending": PromiseQueue {
            "queue": Array [],
            "queueing": false,
          },
          "pristineProps": Object {
            "defaultValue": "{
      \\"compilerOptions\\": {
        \\"strictNullChecks\\": true,
        \\"moduleResolution\\": \\"node\\",
        \\"allowSyntheticDefaultImports\\": true,
        \\"experimentalDecorators\\": true,
        \\"jsx\\": \\"preserve\\",
        \\"noUnusedParameters\\": true,
        \\"noUnusedLocals\\": true,
        \\"declaration\\": true,
        \\"target\\": \\"es6\\",
        \\"lib\\": [
          \\"dom\\",
          \\"dom.iterable\\",
          \\"es7\\",
          \\"es2017.object\\"
        ]
      },
      \\"exclude\\": [
        \\"node_modules\\",
        \\"lib\\",
        \\"es\\"
      ]
    }
    ",
            "name": "content",
            "required": true,
            "type": "string",
          },
          "props": Object {
            "defaultValue": "{
      \\"compilerOptions\\": {
        \\"strictNullChecks\\": true,
        \\"moduleResolution\\": \\"node\\",
        \\"allowSyntheticDefaultImports\\": true,
        \\"experimentalDecorators\\": true,
        \\"jsx\\": \\"preserve\\",
        \\"noUnusedParameters\\": true,
        \\"noUnusedLocals\\": true,
        \\"declaration\\": true,
        \\"target\\": \\"es6\\",
        \\"lib\\": [
          \\"dom\\",
          \\"dom.iterable\\",
          \\"es7\\",
          \\"es2017.object\\"
        ]
      },
      \\"exclude\\": [
        \\"node_modules\\",
        \\"lib\\",
        \\"es\\"
      ]
    }
    ",
            "name": "content",
            "required": true,
            "type": "string",
          },
          "record": undefined,
          "validator": Validator {
            "control": undefined,
            "field": [Circular],
            "innerValidationResults": Array [],
          },
        },
      },
      "inBatchSelection": false,
      "name": undefined,
      "originalData": Array [],
      "pageSize": 10,
      "parent": undefined,
      "parentName": undefined,
      "pending": PromiseQueue {
        "queue": Array [],
        "queueing": false,
      },
      "props": Object {
        "autoCreate": true,
        "autoLocateAfterCreate": true,
        "autoLocateAfterRemove": true,
        "autoLocateFirst": true,
        "autoQuery": false,
        "autoQueryAfterSubmit": true,
        "cascadeParams": [Function],
        "dataToJSON": "dirty",
        "fields": Array [
          Object {
            "defaultValue": "{
      \\"compilerOptions\\": {
        \\"strictNullChecks\\": true,
        \\"moduleResolution\\": \\"node\\",
        \\"allowSyntheticDefaultImports\\": true,
        \\"experimentalDecorators\\": true,
        \\"jsx\\": \\"preserve\\",
        \\"noUnusedParameters\\": true,
        \\"noUnusedLocals\\": true,
        \\"declaration\\": true,
        \\"target\\": \\"es6\\",
        \\"lib\\": [
          \\"dom\\",
          \\"dom.iterable\\",
          \\"es7\\",
          \\"es2017.object\\"
        ]
      },
      \\"exclude\\": [
        \\"node_modules\\",
        \\"lib\\",
        \\"es\\"
      ]
    }
    ",
            "name": "content",
            "required": true,
            "type": "string",
          },
        ],
        "modifiedCheck": true,
        "pageSize": 10,
        "paging": true,
        "selection": "multiple",
      },
      "queryParameter": Object {},
      "records": Array [
        Record {
          "cascadeRecordsMap": Object {},
          "data": Object {
            "content": "{
      \\"compilerOptions\\": {
        \\"strictNullChecks\\": true,
        \\"moduleResolution\\": \\"node\\",
        \\"allowSyntheticDefaultImports\\": true,
        \\"experimentalDecorators\\": true,
        \\"jsx\\": \\"preserve\\",
        \\"noUnusedParameters\\": true,
        \\"noUnusedLocals\\": true,
        \\"declaration\\": true,
        \\"target\\": \\"es6\\",
        \\"lib\\": [
          \\"dom\\",
          \\"dom.iterable\\",
          \\"es7\\",
          \\"es2017.object\\"
        ]
      },
      \\"exclude\\": [
        \\"node_modules\\",
        \\"lib\\",
        \\"es\\"
      ]
    }",
          },
          "dataSet": [Circular],
          "dataSetSnapshot": Object {},
          "editing": undefined,
          "fields": Object {
            "content": Field {
              "dataSet": [Circular],
              "isDynamicPropsComputing": false,
              "lastDynamicProps": Object {},
              "pending": PromiseQueue {
                "queue": Array [],
                "queueing": false,
              },
              "pristineProps": Object {
                "name": "content",
              },
              "props": Object {
                "name": "content",
              },
              "record": [Circular],
              "validator": Validator {
                "control": undefined,
                "field": [Circular],
                "innerValidationResults": Array [],
              },
            },
          },
          "id": 1001,
          "isCached": false,
          "isCurrent": true,
          "isSelected": false,
          "pristineData": Object {
            "content": "{
      \\"compilerOptions\\": {
        \\"strictNullChecks\\": true,
        \\"moduleResolution\\": \\"node\\",
        \\"allowSyntheticDefaultImports\\": true,
        \\"experimentalDecorators\\": true,
        \\"jsx\\": \\"preserve\\",
        \\"noUnusedParameters\\": true,
        \\"noUnusedLocals\\": true,
        \\"declaration\\": true,
        \\"target\\": \\"es6\\",
        \\"lib\\": [
          \\"dom\\",
          \\"dom.iterable\\",
          \\"es7\\",
          \\"es2017.object\\"
        ]
      },
      \\"exclude\\": [
        \\"node_modules\\",
        \\"lib\\",
        \\"es\\"
      ]
    }",
          },
          "selectable": true,
          "state": Object {},
          "status": "add",
        },
      ],
      "resetInBatch": false,
      "selection": "multiple",
      "status": "ready",
      "syncChildrenRemote": [Function],
      "totalCount": 0,
    }
  }
  disabled={false}
  formatHotKey="Home"
  formatter={JSONFormatter {}}
  name="content"
  noValidate={false}
  options={
    Object {
      "mode": Object {
        "json": true,
        "name": "javascript",
      },
    }
  }
  readOnly={false}
  showHelp="newLine"
  style={
    Object {
      "height": 500,
    }
  }
  suffixCls="code-area"
  trim="both"
  unFormatHotKey="End"
>
  <Tooltip
    arrowPointAtCenter={false}
    autoAdjustOverflow={true}
    defaultHidden={true}
    mouseEnterDelay={100}
    mouseLeaveDelay={100}
    placement="bottomLeft"
    suffixCls="form-tooltip c7n-pro-tooltip"
    theme="light"
    title={null}
    transitionName="zoom-big-fast"
    trigger={
      Array [
        "hover",
      ]
    }
  >
    <Trigger
      action={
        Array [
          "hover",
        ]
      }
      arrowPointAtCenter={false}
      autoAdjustOverflow={true}
      blurDelay={0}
      builtinPlacements={
        Object {
          "bottom": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tc",
              "bc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomLeft": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "bottomRight": Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "left": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cr",
              "cl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftBottom": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "leftTop": Object {
            "offset": Array [
              -10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tr",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "right": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "cl",
              "cr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightBottom": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "br",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "rightTop": Object {
            "offset": Array [
              10,
              0,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "top": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bc",
              "tc",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topLeft": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "bl",
              "tl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
          "topRight": Object {
            "offset": Array [
              0,
              -10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "br",
              "tr",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          },
        }
      }
      defaultPopupHidden={true}
      focusDelay={150}
      mouseEnterDelay={100}
      mouseLeaveDelay={100}
      popupContent={null}
      popupPlacement="bottomLeft"
      prefixCls="c7n-pro-form-tooltip c7n-pro-tooltip"
      suffixCls="form-tooltip c7n-pro-tooltip"
      theme="light"
      title={null}
      transitionName="zoom-big-fast"
    >
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$.0"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <div
          className="c7n-pro-code-area-wrapper c7n-pro-code-area-required"
          key=".0"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
          style={Object {}}
        >
          <label>
            <Controlled
              className="c7n-pro-code-area"
              disabled={false}
              editorDidMount={[Function]}
              formatter={JSONFormatter {}}
              name="content"
              noValidate={false}
              onBeforeChange={[Function]}
              onBlur={[Function]}
              onCompositionEnd={[Function]}
              onCompositionStart={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              options={
                Object {
                  "gutters": Array [
                    "CodeMirror-lint-markers",
                  ],
                  "lineNumbers": true,
                  "lint": true,
                  "mode": Object {
                    "json": true,
                    "name": "javascript",
                  },
                  "readOnly": false,
                  "theme": "neat",
                }
              }
              style={
                Object {
                  "height": 500,
                }
              }
              value="{
  \\"compilerOptions\\": {
    \\"strictNullChecks\\": true,
    \\"moduleResolution\\": \\"node\\",
    \\"allowSyntheticDefaultImports\\": true,
    \\"experimentalDecorators\\": true,
    \\"jsx\\": \\"preserve\\",
    \\"noUnusedParameters\\": true,
    \\"noUnusedLocals\\": true,
    \\"declaration\\": true,
    \\"target\\": \\"es6\\",
    \\"lib\\": [\\"dom\\", \\"dom.iterable\\", \\"es7\\", \\"es2017.object\\"]
  },
  \\"exclude\\": [\\"node_modules\\", \\"lib\\", \\"es\\"]
}
"
            >
              <div
                className="react-codemirror2 c7n-pro-code-area"
              />
            </Controlled>
          </label>
        </div>
      </TriggerChild>
      <TriggerChild
        isClickScrollbar={
          Object {
            "value": false,
          }
        }
        key=".$text-null/.1"
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        popupHidden={true}
      >
        <span
          key="text-null/.1"
          onBlur={[Function]}
          onClick={[Function]}
          onContextMenu={[Function]}
          onFocus={[Function]}
          onMouseDown={[Function]}
          onMouseEnter={[Function]}
          onMouseLeave={[Function]}
        />
      </TriggerChild>
      <Popup
        align={
          Object {
            "offset": Array [
              0,
              10,
            ],
            "overflow": Object {
              "adjustX": 1,
              "adjustY": 1,
            },
            "points": Array [
              "tl",
              "bl",
            ],
            "targetOffset": Array [
              0,
              0,
            ],
          }
        }
        className="c7n-pro-form-tooltip c7n-pro-tooltip-popup"
        getClassNameFromAlign={[Function]}
        getRootDomNode={[Function]}
        hidden={true}
        key="popup"
        onMouseDown={[Function]}
        onMouseEnter={[Function]}
        onMouseLeave={[Function]}
        onMouseUp={[Function]}
        suffixCls="popup"
        transitionName="zoom-big-fast"
      />
    </Trigger>
  </Tooltip>
</CodeArea>
`;
